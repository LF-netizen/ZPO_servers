@startuml
class Client {
+ server: AbstractServer
+ __init__(self, server: AbstractServer): None
+ get_total_price(self, n_letters: Optional[int]): Optional[float]
}


abstract class AbstractServer {
+ n_max_returned_entries: int
+ __init__(self): None
+ {static} get_all_products(lst: List[Product], n_letters: int): List[Product]
+ {abstract} get_entries(self, n_letters: int): List[Product]
}

class ListServer {
+ products: List[Product]
+ __init__(self, products: List[Product]): None
+ get_entries(self, n_letters: int): List[Product]

}

class MapServer {
+ products: Dict[str, Product]
+ __init__(self, products: List[Product]): None
+ get_entries(self, n_letters: int): List[Product]
}

class Product {
+ name: str
+ price: float
+ __init__(self, name: str, price: float): None
+ __eq__(self, other: Product): bool
+ __hash__(self)
+ {static} if_name_correct(name: str): None
}

class TooManyProductsFoundError {
+ __init__(self, msg=None: str): None
}

Client o-- AbstractServer
AbstractServer ^-- ListServer
AbstractServer ^-- MapServer
ListServer *-- Product
MapServer *-- Product
TooManyProductsFoundError <.. AbstractServer
@enduml